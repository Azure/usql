// Load data from ADL file into tables. 
USE master;

CREATE ASSEMBLY ext FROM "MovieLensExtractor.dll";
REFERENCE ASSEMBLY ext;


DECLARE @INPUTDIR string =  "/movies/ml-1m/";
DECLARE @USERSInp string = @INPUTDIR + "users.dat";
DECLARE @MOVIESInp string = @INPUTDIR + "movies.dat";
DECLARE @RATINGSInp string = @INPUTDIR + "ratings.dat";

@Users =
    EXTRACT UserID string,
            Gender string,
            Age string,
            Occupation string,
            Zip string
    FROM @USERSInp
    USING new MovieLensExtractor.MovieLensExtractor(5);

@Movies =
    EXTRACT MovieID string,
            MovieName string,
            Genres string
    FROM @MOVIESInp
    USING new MovieLensExtractor.MovieLensExtractor(3);

@m = SELECT *,new SQL.ARRAY<string>(
                Genres.Split('|')) AS Genre
     FROM @Movies;

@MovieGenre = SELECT MovieID,MovieName,g AS Genre
     FROM @m CROSS APPLY EXPLODE(Genre) AS Genre(g);

@Ratings =
    EXTRACT UserID string,
            MovieID string,
            Rating string,
            TimeStamp string
    FROM @RATINGSInp
    USING new MovieLensExtractor.MovieLensExtractor(4);
   
   // Top100 with more than 75 ratings
@Top100 = 
    SELECT MovieID,AVG(float.Parse(Rating)) AS AvgRating,COUNT(*) AS RatingCount
    FROM @Ratings AS r
    GROUP BY MovieID
    HAVING COUNT(*) > 75
    ORDER BY AvgRating DESC
    FETCH 100 ROWS         
;

@y =
    SELECT M.MovieID,
           M.MovieName,
           AvgRating,
           RatingCount
           
    FROM @Top100 AS j
         JOIN
             @Movies AS M
         ON j.MovieID == M.MovieID;


OUTPUT @y
TO "Top100.csv"
ORDER BY AvgRating DESC
USING Outputters.Csv()
;

    
// Outputs below not really useful but prevent the DEAD CODE error being thrown 
// which is good in a production env but this is a simple demo.
OUTPUT @Users
TO "Users.csv" USING Outputters.Csv();


OUTPUT @MovieGenre
TO "Movies.csv"
USING Outputters.Csv();
      
