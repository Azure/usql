//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Azure Data Lake Tools 2.3.4000.0
// </auto-generated>
//
// IMPORTANT:
//   Please disable Shadow Copy if you are using NUnit.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Analytics.ScriptUnitTest;

// Test cases for U-SQL script in USQLQuery project
// You can right click the U-SQL script in Visual Studio to generate the test case
// USQLQuery project is referenced, removing the reference fails build

namespace USQLQuery_UnitTest
{
    [TestClass()]
    public class Script_UnitTest
    {
        [TestMethod()]
        public void Test_Script_usql()
        {
            // uSqlProjectOutputRelativePath is the relative path of the output of U-SQL project USQLQuery.
            // cppSdkFolderFullPath is the full path of CPPSDK folder.
            //   If the value of cppSdkFolderFullPath is empty, environment variable SCOPE_CPP_SDK or the one installed with ADL Tools for Visual Studio will be used.
            //   Please refer to https://go.microsoft.com/fwlink/?linkid=874080 to learn more about CPPSDK.

            USqlScriptTestRunner testRunner = new USqlScriptTestRunner(uSqlProjectOutputRelativePath: @"USQLQuery.usqlpack", cppSdkFolderFullPath: @"");
            
            // Test data and databases will be deployed locally.

            // Set the test data source property for U-SQL project and point it to the folder contains the test input files.
       
            testRunner.Initialize();

            // scriptFileRelativePath is the relative path of the script to be tested. The script is included in the output of U-SQL project USQLQuery.

            USqlScriptTestResult testResult = testRunner.Run(scriptFileRelativePath: @"Script.usql");

            // testResult.ErrorMessage includes error details if the test case fails.

            Assert.IsTrue(testResult.IsSuccessful, testResult.ErrorMessage);
        }
    }
}
